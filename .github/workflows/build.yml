name: CI
 
on: 
  push:
    branches: [ "main" ] # run when push is committed to the main branch
  pull_request:
    branches: [ "main" ] # run when pull is performed to the main branch
jobs:
  build_and_test:
    name: "Build and test"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # we build on GitHub-provided Windows and Linux images
    runs-on: ${{ matrix.os }} # use value from the matrix
    steps:
    - name: Install dependencies (linux)
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest' # conditional, runs this step only on the Ubuntu runner

    - name: Install Esri Runtime SDK (Linux)
      run: |
        wget -qO- "https://esrisoftware.esri.com/akdlm/software/ArcGIS_MapsSDK/200.4.0/ArcGIS_Maps_SDK_Qt_Linux64_200_4_0.tar.gz?downloadID=NA&type=NA&agolUsername=NA&receiptId=downloads.arcgis.com&__gdb__=1715735530_34be0cd8f7f57704a8244270024209ed&ext=.gz" -O sdk.tar.gz
        tar -xzf sdk.tar.gz -C /opt
        echo "ESRI_SDK_PATH=/opt/Esri" >> $GITHUB_ENV
      if: matrix.os == 'ubuntu-latest'

      # Windows installer
    - name: Install Ninja (windows)    # Ninja is not available in GitHub-provided images,
                                       # see https://github.com/actions/runner-images/issues/514
      run: choco install ninja         # So let's install it through Chocolatey
      if: matrix.os == 'windows-latest'

    - name: Install Esri Runtime SDK (Windows)
      run: |
        Invoke-WebRequest -Uri "https://esrisoftware.esri.com/akdlm/software/ArcGIS_MapsSDK/200.4.0/ArcGIS_Maps_SDK_Qt_Windows_200_4_0.exe?downloadID=NA&type=NA&agolUsername=NA&receiptId=downloads.arcgis.com&__gdb__=1715734189_9cd6573f7b8d772e5e24889476021d33&ext=.exe" -OutFile "Esri_Runtime_SDK.exe"
        Start-Process -FilePath "Esri_Runtime_SDK.exe" -ArgumentList '/S', '/NCRC', '/D=C:\Esri' -NoNewWindow -Wait
        echo "ESRI_SDK_PATH=C:\Esri" | Out-File -Append -Encoding ASCII $env:GITHUB_ENV
      if: matrix.os == 'windows-latest'
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.2'
    - uses: ilammy/msvc-dev-cmd@v1 # This action essentially calls vcvarsall.bat for the latest VS in the runner for x64
    - uses: actions/checkout@v3    # Actually check out the sources. GH Actions can run for events that may not require
                                   # sources (e.g. when someone comments on an issue)

    # Here we call CMake manually, there are solutions for that in the Marketplace: https://github.com/marketplace/actions/run-cmake
    - name: Build
      # We don't need to set up the environment variable for CMake to see Qt because the install-qt-action
      # sets up the necessary variables automatically
      run: cmake -S . -B build -G "Ninja Multi-Config" && cmake --build build --config Debug
